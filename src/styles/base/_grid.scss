// Define grid values
$grid-width:   1200px;
$grid-columns: 12;
$grid-gutter:  24px;

///
// Grid element
// @param  {int} $cols    How many columns to span
// @param  {str} $gutter  The width of the gutter. Default: global gutter
// @param  {bol} $margin  Include margins in output. Not necessary when just declaring widths for different breakpoints
///
@mixin grid($cols, $gutter: $grid-gutter, $margin: true) {
	$width: ($cols / $grid-columns) * 100%;

	width: calc(#{$width} - #{$gutter});
}

.grid {
	float: left;
	width: calc(100% - #{$grid-gutter});
	margin-right: $grid-gutter / 2;
	margin-left: $grid-gutter / 2;

	// Generate classes
	@for $i from 1 to $grid-columns + 1 {
		&--#{$i} {
			@include grid($i);

			&\@xs { @include bp($xsmall) { @include grid($i, $margin: false); }}
			&\@sm { @include bp($small) { @include grid($i, $margin: false); }}
			&\@md { @include bp($medium) { @include grid($i, $margin: false); }}
			&\@lg { @include bp($large) { @include grid($i, $margin: false); }}
			&\@xl { @include bp($x-large) { @include grid($i, $margin: false); }}
		}
	}

	&--centered {
		float: none;
		margin-left: auto !important;
		margin-right: auto !important;
	}

	&--pull-right {
		float: right;
	}
}

.group {
	@include clearfix;

	&--grid {
		@extend .group;

		margin-right: -($grid-gutter / 2);
		margin-left: -($grid-gutter / 2);

		&--justified .grid:last-child { float: right; }
	}
}